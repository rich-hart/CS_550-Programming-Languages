Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> list
Rule 1     list -> LBRACKET sequence RBRACKET
Rule 2     list -> LBRACKET RBRACKET
Rule 3     sequence -> listelement COMMA sequence
Rule 4     sequence -> listelement
Rule 5     listelement -> list
Rule 6     listelement -> NUMBER

Terminals, with rules where they appear

COMMA                : 3
LBRACKET             : 1 2
NUMBER               : 6
RBRACKET             : 1 2
error                : 

Nonterminals, with rules where they appear

list                 : 5 0
listelement          : 3 4
sequence             : 1 3

Parsing method: LALR

state 0

    (0) S' -> . list
    (1) list -> . LBRACKET sequence RBRACKET
    (2) list -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 1

    list                           shift and go to state 2

state 1

    (1) list -> LBRACKET . sequence RBRACKET
    (2) list -> LBRACKET . RBRACKET
    (3) sequence -> . listelement COMMA sequence
    (4) sequence -> . listelement
    (5) listelement -> . list
    (6) listelement -> . NUMBER
    (1) list -> . LBRACKET sequence RBRACKET
    (2) list -> . LBRACKET RBRACKET

    RBRACKET        shift and go to state 6
    NUMBER          shift and go to state 5
    LBRACKET        shift and go to state 1

    listelement                    shift and go to state 7
    list                           shift and go to state 4
    sequence                       shift and go to state 3

state 2

    (0) S' -> list .



state 3

    (1) list -> LBRACKET sequence . RBRACKET

    RBRACKET        shift and go to state 8


state 4

    (5) listelement -> list .

    COMMA           reduce using rule 5 (listelement -> list .)
    RBRACKET        reduce using rule 5 (listelement -> list .)


state 5

    (6) listelement -> NUMBER .

    COMMA           reduce using rule 6 (listelement -> NUMBER .)
    RBRACKET        reduce using rule 6 (listelement -> NUMBER .)


state 6

    (2) list -> LBRACKET RBRACKET .

    COMMA           reduce using rule 2 (list -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 2 (list -> LBRACKET RBRACKET .)
    $end            reduce using rule 2 (list -> LBRACKET RBRACKET .)


state 7

    (3) sequence -> listelement . COMMA sequence
    (4) sequence -> listelement .

    COMMA           shift and go to state 9
    RBRACKET        reduce using rule 4 (sequence -> listelement .)


state 8

    (1) list -> LBRACKET sequence RBRACKET .

    COMMA           reduce using rule 1 (list -> LBRACKET sequence RBRACKET .)
    RBRACKET        reduce using rule 1 (list -> LBRACKET sequence RBRACKET .)
    $end            reduce using rule 1 (list -> LBRACKET sequence RBRACKET .)


state 9

    (3) sequence -> listelement COMMA . sequence
    (3) sequence -> . listelement COMMA sequence
    (4) sequence -> . listelement
    (5) listelement -> . list
    (6) listelement -> . NUMBER
    (1) list -> . LBRACKET sequence RBRACKET
    (2) list -> . LBRACKET RBRACKET

    NUMBER          shift and go to state 5
    LBRACKET        shift and go to state 1

    listelement                    shift and go to state 7
    list                           shift and go to state 4
    sequence                       shift and go to state 10

state 10

    (3) sequence -> listelement COMMA sequence .

    RBRACKET        reduce using rule 3 (sequence -> listelement COMMA sequence .)

