Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> stmt_list
Rule 2     stmt_list -> stmt SEMICOLON stmt_list
Rule 3     stmt_list -> stmt
Rule 4     stmt -> assign_stmt
Rule 5     stmt -> while_stmt
Rule 6     stmt -> if_stmt
Rule 7     stmt -> define_stmt
Rule 8     expr -> expr PLUS term
Rule 9     expr -> expr MINUS term
Rule 10    expr_list -> expr COMMA expr_list
Rule 11    expr_list -> expr
Rule 12    expr -> term
Rule 13    term -> term TIMES fact
Rule 14    term -> fact
Rule 15    fact -> LPAREN expr RPAREN
Rule 16    fact -> NUMBER
Rule 17    fact -> IDENT
Rule 18    fact -> func_call
Rule 19    assign_stmt -> assign_stmt_expr
Rule 20    assign_stmt -> assign_stmt_list
Rule 21    assign_stmt_expr -> IDENT ASSIGNOP expr
Rule 22    assign_stmt_list -> IDENT ASSIGNOP list
Rule 23    list -> LBRACKET sequence RBRACKET
Rule 24    list -> LBRACKET RBRACKET
Rule 25    sequence -> listelement COMMA sequence
Rule 26    sequence -> listelement
Rule 27    listelement -> list
Rule 28    listelement -> NUMBER
Rule 29    while_stmt -> WHILE expr DO stmt_list OD
Rule 30    if_stmt -> IF expr THEN stmt_list ELSE stmt_list FI
Rule 31    define_stmt -> DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END
Rule 32    param_list -> IDENT COMMA param_list
Rule 33    param_list -> IDENT
Rule 34    func_call -> IDENT LPAREN expr_list RPAREN
Rule 35    list -> CAR LPAREN list RPAREN
Rule 36    list -> CDR LPAREN list RPAREN
Rule 37    list -> CONS LPAREN expr COMMA list RPAREN
Rule 38    term -> INTP LPAREN expr RPAREN
Rule 39    term -> INTP LPAREN list RPAREN
Rule 40    term -> LISTP LPAREN expr RPAREN
Rule 41    term -> LISTP LPAREN list RPAREN
Rule 42    term -> NULLP LPAREN list RPAREN

Terminals, with rules where they appear

ASSIGNOP             : 21 22
CAR                  : 35
CDR                  : 36
COMMA                : 10 25 32 37
CONS                 : 37
DEFINE               : 31
DO                   : 29
ELSE                 : 30
END                  : 31
FI                   : 30
IDENT                : 17 21 22 31 32 33 34
IF                   : 30
INTP                 : 38 39
LBRACKET             : 23 24
LISTP                : 40 41
LPAREN               : 15 31 34 35 36 37 38 39 40 41 42
MINUS                : 9
NULLP                : 42
NUMBER               : 16 28
OD                   : 29
PLUS                 : 8
PROC                 : 31
RBRACKET             : 23 24
RPAREN               : 15 31 34 35 36 37 38 39 40 41 42
SEMICOLON            : 2
THEN                 : 30
TIMES                : 13
WHILE                : 29
error                : 

Nonterminals, with rules where they appear

assign_stmt          : 4
assign_stmt_expr     : 19
assign_stmt_list     : 20
define_stmt          : 7
expr                 : 8 9 10 11 15 21 29 30 37 38 40
expr_list            : 10 34
fact                 : 13 14
func_call            : 18
if_stmt              : 6
list                 : 22 27 35 36 37 39 41 42
listelement          : 25 26
param_list           : 31 32
program              : 0
sequence             : 23 25
stmt                 : 2 3
stmt_list            : 1 2 29 30 30 31
term                 : 8 9 12 13
while_stmt           : 5

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . stmt_list
    (2) stmt_list -> . stmt SEMICOLON stmt_list
    (3) stmt_list -> . stmt
    (4) stmt -> . assign_stmt
    (5) stmt -> . while_stmt
    (6) stmt -> . if_stmt
    (7) stmt -> . define_stmt
    (19) assign_stmt -> . assign_stmt_expr
    (20) assign_stmt -> . assign_stmt_list
    (29) while_stmt -> . WHILE expr DO stmt_list OD
    (30) if_stmt -> . IF expr THEN stmt_list ELSE stmt_list FI
    (31) define_stmt -> . DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END
    (21) assign_stmt_expr -> . IDENT ASSIGNOP expr
    (22) assign_stmt_list -> . IDENT ASSIGNOP list

    WHILE           shift and go to state 1
    IF              shift and go to state 10
    DEFINE          shift and go to state 5
    IDENT           shift and go to state 6

    stmt_list                      shift and go to state 11
    if_stmt                        shift and go to state 12
    define_stmt                    shift and go to state 2
    stmt                           shift and go to state 7
    assign_stmt                    shift and go to state 3
    while_stmt                     shift and go to state 13
    program                        shift and go to state 4
    assign_stmt_list               shift and go to state 8
    assign_stmt_expr               shift and go to state 9

state 1

    (29) while_stmt -> WHILE . expr DO stmt_list OD
    (8) expr -> . expr PLUS term
    (9) expr -> . expr MINUS term
    (12) expr -> . term
    (13) term -> . term TIMES fact
    (14) term -> . fact
    (38) term -> . INTP LPAREN expr RPAREN
    (39) term -> . INTP LPAREN list RPAREN
    (40) term -> . LISTP LPAREN expr RPAREN
    (41) term -> . LISTP LPAREN list RPAREN
    (42) term -> . NULLP LPAREN list RPAREN
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . IDENT
    (18) fact -> . func_call
    (34) func_call -> . IDENT LPAREN expr_list RPAREN

    INTP            shift and go to state 20
    LISTP           shift and go to state 19
    NULLP           shift and go to state 17
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 23
    IDENT           shift and go to state 15

    func_call                      shift and go to state 16
    term                           shift and go to state 14
    expr                           shift and go to state 18
    fact                           shift and go to state 22

state 2

    (7) stmt -> define_stmt .

    SEMICOLON       reduce using rule 7 (stmt -> define_stmt .)
    FI              reduce using rule 7 (stmt -> define_stmt .)
    ELSE            reduce using rule 7 (stmt -> define_stmt .)
    OD              reduce using rule 7 (stmt -> define_stmt .)
    END             reduce using rule 7 (stmt -> define_stmt .)
    $end            reduce using rule 7 (stmt -> define_stmt .)


state 3

    (4) stmt -> assign_stmt .

    SEMICOLON       reduce using rule 4 (stmt -> assign_stmt .)
    FI              reduce using rule 4 (stmt -> assign_stmt .)
    ELSE            reduce using rule 4 (stmt -> assign_stmt .)
    OD              reduce using rule 4 (stmt -> assign_stmt .)
    END             reduce using rule 4 (stmt -> assign_stmt .)
    $end            reduce using rule 4 (stmt -> assign_stmt .)


state 4

    (0) S' -> program .



state 5

    (31) define_stmt -> DEFINE . IDENT PROC LPAREN param_list RPAREN stmt_list END

    IDENT           shift and go to state 24


state 6

    (21) assign_stmt_expr -> IDENT . ASSIGNOP expr
    (22) assign_stmt_list -> IDENT . ASSIGNOP list

    ASSIGNOP        shift and go to state 25


state 7

    (2) stmt_list -> stmt . SEMICOLON stmt_list
    (3) stmt_list -> stmt .

    SEMICOLON       shift and go to state 26
    $end            reduce using rule 3 (stmt_list -> stmt .)
    ELSE            reduce using rule 3 (stmt_list -> stmt .)
    OD              reduce using rule 3 (stmt_list -> stmt .)
    END             reduce using rule 3 (stmt_list -> stmt .)
    FI              reduce using rule 3 (stmt_list -> stmt .)


state 8

    (20) assign_stmt -> assign_stmt_list .

    SEMICOLON       reduce using rule 20 (assign_stmt -> assign_stmt_list .)
    $end            reduce using rule 20 (assign_stmt -> assign_stmt_list .)
    END             reduce using rule 20 (assign_stmt -> assign_stmt_list .)
    OD              reduce using rule 20 (assign_stmt -> assign_stmt_list .)
    ELSE            reduce using rule 20 (assign_stmt -> assign_stmt_list .)
    FI              reduce using rule 20 (assign_stmt -> assign_stmt_list .)


state 9

    (19) assign_stmt -> assign_stmt_expr .

    SEMICOLON       reduce using rule 19 (assign_stmt -> assign_stmt_expr .)
    $end            reduce using rule 19 (assign_stmt -> assign_stmt_expr .)
    END             reduce using rule 19 (assign_stmt -> assign_stmt_expr .)
    OD              reduce using rule 19 (assign_stmt -> assign_stmt_expr .)
    ELSE            reduce using rule 19 (assign_stmt -> assign_stmt_expr .)
    FI              reduce using rule 19 (assign_stmt -> assign_stmt_expr .)


state 10

    (30) if_stmt -> IF . expr THEN stmt_list ELSE stmt_list FI
    (8) expr -> . expr PLUS term
    (9) expr -> . expr MINUS term
    (12) expr -> . term
    (13) term -> . term TIMES fact
    (14) term -> . fact
    (38) term -> . INTP LPAREN expr RPAREN
    (39) term -> . INTP LPAREN list RPAREN
    (40) term -> . LISTP LPAREN expr RPAREN
    (41) term -> . LISTP LPAREN list RPAREN
    (42) term -> . NULLP LPAREN list RPAREN
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . IDENT
    (18) fact -> . func_call
    (34) func_call -> . IDENT LPAREN expr_list RPAREN

    INTP            shift and go to state 20
    LISTP           shift and go to state 19
    NULLP           shift and go to state 17
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 23
    IDENT           shift and go to state 15

    func_call                      shift and go to state 16
    term                           shift and go to state 14
    expr                           shift and go to state 27
    fact                           shift and go to state 22

state 11

    (1) program -> stmt_list .

    $end            reduce using rule 1 (program -> stmt_list .)


state 12

    (6) stmt -> if_stmt .

    SEMICOLON       reduce using rule 6 (stmt -> if_stmt .)
    FI              reduce using rule 6 (stmt -> if_stmt .)
    ELSE            reduce using rule 6 (stmt -> if_stmt .)
    OD              reduce using rule 6 (stmt -> if_stmt .)
    END             reduce using rule 6 (stmt -> if_stmt .)
    $end            reduce using rule 6 (stmt -> if_stmt .)


state 13

    (5) stmt -> while_stmt .

    SEMICOLON       reduce using rule 5 (stmt -> while_stmt .)
    FI              reduce using rule 5 (stmt -> while_stmt .)
    ELSE            reduce using rule 5 (stmt -> while_stmt .)
    OD              reduce using rule 5 (stmt -> while_stmt .)
    END             reduce using rule 5 (stmt -> while_stmt .)
    $end            reduce using rule 5 (stmt -> while_stmt .)


state 14

    (12) expr -> term .
    (13) term -> term . TIMES fact

    THEN            reduce using rule 12 (expr -> term .)
    PLUS            reduce using rule 12 (expr -> term .)
    MINUS           reduce using rule 12 (expr -> term .)
    COMMA           reduce using rule 12 (expr -> term .)
    RPAREN          reduce using rule 12 (expr -> term .)
    SEMICOLON       reduce using rule 12 (expr -> term .)
    $end            reduce using rule 12 (expr -> term .)
    OD              reduce using rule 12 (expr -> term .)
    ELSE            reduce using rule 12 (expr -> term .)
    FI              reduce using rule 12 (expr -> term .)
    END             reduce using rule 12 (expr -> term .)
    DO              reduce using rule 12 (expr -> term .)
    TIMES           shift and go to state 28


state 15

    (17) fact -> IDENT .
    (34) func_call -> IDENT . LPAREN expr_list RPAREN

    TIMES           reduce using rule 17 (fact -> IDENT .)
    RPAREN          reduce using rule 17 (fact -> IDENT .)
    PLUS            reduce using rule 17 (fact -> IDENT .)
    MINUS           reduce using rule 17 (fact -> IDENT .)
    COMMA           reduce using rule 17 (fact -> IDENT .)
    DO              reduce using rule 17 (fact -> IDENT .)
    THEN            reduce using rule 17 (fact -> IDENT .)
    SEMICOLON       reduce using rule 17 (fact -> IDENT .)
    $end            reduce using rule 17 (fact -> IDENT .)
    OD              reduce using rule 17 (fact -> IDENT .)
    ELSE            reduce using rule 17 (fact -> IDENT .)
    FI              reduce using rule 17 (fact -> IDENT .)
    END             reduce using rule 17 (fact -> IDENT .)
    LPAREN          shift and go to state 29


state 16

    (18) fact -> func_call .

    TIMES           reduce using rule 18 (fact -> func_call .)
    RPAREN          reduce using rule 18 (fact -> func_call .)
    PLUS            reduce using rule 18 (fact -> func_call .)
    MINUS           reduce using rule 18 (fact -> func_call .)
    COMMA           reduce using rule 18 (fact -> func_call .)
    DO              reduce using rule 18 (fact -> func_call .)
    THEN            reduce using rule 18 (fact -> func_call .)
    SEMICOLON       reduce using rule 18 (fact -> func_call .)
    $end            reduce using rule 18 (fact -> func_call .)
    OD              reduce using rule 18 (fact -> func_call .)
    ELSE            reduce using rule 18 (fact -> func_call .)
    FI              reduce using rule 18 (fact -> func_call .)
    END             reduce using rule 18 (fact -> func_call .)


state 17

    (42) term -> NULLP . LPAREN list RPAREN

    LPAREN          shift and go to state 30


state 18

    (29) while_stmt -> WHILE expr . DO stmt_list OD
    (8) expr -> expr . PLUS term
    (9) expr -> expr . MINUS term

    DO              shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33


state 19

    (40) term -> LISTP . LPAREN expr RPAREN
    (41) term -> LISTP . LPAREN list RPAREN

    LPAREN          shift and go to state 34


state 20

    (38) term -> INTP . LPAREN expr RPAREN
    (39) term -> INTP . LPAREN list RPAREN

    LPAREN          shift and go to state 35


state 21

    (15) fact -> LPAREN . expr RPAREN
    (8) expr -> . expr PLUS term
    (9) expr -> . expr MINUS term
    (12) expr -> . term
    (13) term -> . term TIMES fact
    (14) term -> . fact
    (38) term -> . INTP LPAREN expr RPAREN
    (39) term -> . INTP LPAREN list RPAREN
    (40) term -> . LISTP LPAREN expr RPAREN
    (41) term -> . LISTP LPAREN list RPAREN
    (42) term -> . NULLP LPAREN list RPAREN
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . IDENT
    (18) fact -> . func_call
    (34) func_call -> . IDENT LPAREN expr_list RPAREN

    INTP            shift and go to state 20
    LISTP           shift and go to state 19
    NULLP           shift and go to state 17
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 23
    IDENT           shift and go to state 15

    func_call                      shift and go to state 16
    term                           shift and go to state 14
    expr                           shift and go to state 36
    fact                           shift and go to state 22

state 22

    (14) term -> fact .

    TIMES           reduce using rule 14 (term -> fact .)
    COMMA           reduce using rule 14 (term -> fact .)
    PLUS            reduce using rule 14 (term -> fact .)
    MINUS           reduce using rule 14 (term -> fact .)
    THEN            reduce using rule 14 (term -> fact .)
    SEMICOLON       reduce using rule 14 (term -> fact .)
    $end            reduce using rule 14 (term -> fact .)
    OD              reduce using rule 14 (term -> fact .)
    ELSE            reduce using rule 14 (term -> fact .)
    FI              reduce using rule 14 (term -> fact .)
    END             reduce using rule 14 (term -> fact .)
    RPAREN          reduce using rule 14 (term -> fact .)
    DO              reduce using rule 14 (term -> fact .)


state 23

    (16) fact -> NUMBER .

    TIMES           reduce using rule 16 (fact -> NUMBER .)
    RPAREN          reduce using rule 16 (fact -> NUMBER .)
    PLUS            reduce using rule 16 (fact -> NUMBER .)
    MINUS           reduce using rule 16 (fact -> NUMBER .)
    COMMA           reduce using rule 16 (fact -> NUMBER .)
    DO              reduce using rule 16 (fact -> NUMBER .)
    THEN            reduce using rule 16 (fact -> NUMBER .)
    SEMICOLON       reduce using rule 16 (fact -> NUMBER .)
    $end            reduce using rule 16 (fact -> NUMBER .)
    OD              reduce using rule 16 (fact -> NUMBER .)
    ELSE            reduce using rule 16 (fact -> NUMBER .)
    FI              reduce using rule 16 (fact -> NUMBER .)
    END             reduce using rule 16 (fact -> NUMBER .)


state 24

    (31) define_stmt -> DEFINE IDENT . PROC LPAREN param_list RPAREN stmt_list END

    PROC            shift and go to state 37


state 25

    (21) assign_stmt_expr -> IDENT ASSIGNOP . expr
    (22) assign_stmt_list -> IDENT ASSIGNOP . list
    (8) expr -> . expr PLUS term
    (9) expr -> . expr MINUS term
    (12) expr -> . term
    (23) list -> . LBRACKET sequence RBRACKET
    (24) list -> . LBRACKET RBRACKET
    (35) list -> . CAR LPAREN list RPAREN
    (36) list -> . CDR LPAREN list RPAREN
    (37) list -> . CONS LPAREN expr COMMA list RPAREN
    (13) term -> . term TIMES fact
    (14) term -> . fact
    (38) term -> . INTP LPAREN expr RPAREN
    (39) term -> . INTP LPAREN list RPAREN
    (40) term -> . LISTP LPAREN expr RPAREN
    (41) term -> . LISTP LPAREN list RPAREN
    (42) term -> . NULLP LPAREN list RPAREN
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . IDENT
    (18) fact -> . func_call
    (34) func_call -> . IDENT LPAREN expr_list RPAREN

    LBRACKET        shift and go to state 40
    CAR             shift and go to state 39
    CDR             shift and go to state 43
    CONS            shift and go to state 38
    INTP            shift and go to state 20
    LISTP           shift and go to state 19
    NULLP           shift and go to state 17
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 23
    IDENT           shift and go to state 15

    func_call                      shift and go to state 16
    term                           shift and go to state 14
    expr                           shift and go to state 41
    list                           shift and go to state 42
    fact                           shift and go to state 22

state 26

    (2) stmt_list -> stmt SEMICOLON . stmt_list
    (2) stmt_list -> . stmt SEMICOLON stmt_list
    (3) stmt_list -> . stmt
    (4) stmt -> . assign_stmt
    (5) stmt -> . while_stmt
    (6) stmt -> . if_stmt
    (7) stmt -> . define_stmt
    (19) assign_stmt -> . assign_stmt_expr
    (20) assign_stmt -> . assign_stmt_list
    (29) while_stmt -> . WHILE expr DO stmt_list OD
    (30) if_stmt -> . IF expr THEN stmt_list ELSE stmt_list FI
    (31) define_stmt -> . DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END
    (21) assign_stmt_expr -> . IDENT ASSIGNOP expr
    (22) assign_stmt_list -> . IDENT ASSIGNOP list

    WHILE           shift and go to state 1
    IF              shift and go to state 10
    DEFINE          shift and go to state 5
    IDENT           shift and go to state 6

    stmt_list                      shift and go to state 44
    if_stmt                        shift and go to state 12
    define_stmt                    shift and go to state 2
    stmt                           shift and go to state 7
    assign_stmt                    shift and go to state 3
    while_stmt                     shift and go to state 13
    assign_stmt_list               shift and go to state 8
    assign_stmt_expr               shift and go to state 9

state 27

    (30) if_stmt -> IF expr . THEN stmt_list ELSE stmt_list FI
    (8) expr -> expr . PLUS term
    (9) expr -> expr . MINUS term

    THEN            shift and go to state 45
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33


state 28

    (13) term -> term TIMES . fact
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . IDENT
    (18) fact -> . func_call
    (34) func_call -> . IDENT LPAREN expr_list RPAREN

    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 23
    IDENT           shift and go to state 15

    func_call                      shift and go to state 16
    fact                           shift and go to state 46

state 29

    (34) func_call -> IDENT LPAREN . expr_list RPAREN
    (10) expr_list -> . expr COMMA expr_list
    (11) expr_list -> . expr
    (8) expr -> . expr PLUS term
    (9) expr -> . expr MINUS term
    (12) expr -> . term
    (13) term -> . term TIMES fact
    (14) term -> . fact
    (38) term -> . INTP LPAREN expr RPAREN
    (39) term -> . INTP LPAREN list RPAREN
    (40) term -> . LISTP LPAREN expr RPAREN
    (41) term -> . LISTP LPAREN list RPAREN
    (42) term -> . NULLP LPAREN list RPAREN
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . IDENT
    (18) fact -> . func_call
    (34) func_call -> . IDENT LPAREN expr_list RPAREN

    INTP            shift and go to state 20
    LISTP           shift and go to state 19
    NULLP           shift and go to state 17
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 23
    IDENT           shift and go to state 15

    func_call                      shift and go to state 16
    term                           shift and go to state 14
    expr_list                      shift and go to state 47
    expr                           shift and go to state 48
    fact                           shift and go to state 22

state 30

    (42) term -> NULLP LPAREN . list RPAREN
    (23) list -> . LBRACKET sequence RBRACKET
    (24) list -> . LBRACKET RBRACKET
    (35) list -> . CAR LPAREN list RPAREN
    (36) list -> . CDR LPAREN list RPAREN
    (37) list -> . CONS LPAREN expr COMMA list RPAREN

    LBRACKET        shift and go to state 40
    CAR             shift and go to state 39
    CDR             shift and go to state 43
    CONS            shift and go to state 38

    list                           shift and go to state 49

state 31

    (29) while_stmt -> WHILE expr DO . stmt_list OD
    (2) stmt_list -> . stmt SEMICOLON stmt_list
    (3) stmt_list -> . stmt
    (4) stmt -> . assign_stmt
    (5) stmt -> . while_stmt
    (6) stmt -> . if_stmt
    (7) stmt -> . define_stmt
    (19) assign_stmt -> . assign_stmt_expr
    (20) assign_stmt -> . assign_stmt_list
    (29) while_stmt -> . WHILE expr DO stmt_list OD
    (30) if_stmt -> . IF expr THEN stmt_list ELSE stmt_list FI
    (31) define_stmt -> . DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END
    (21) assign_stmt_expr -> . IDENT ASSIGNOP expr
    (22) assign_stmt_list -> . IDENT ASSIGNOP list

    WHILE           shift and go to state 1
    IF              shift and go to state 10
    DEFINE          shift and go to state 5
    IDENT           shift and go to state 6

    stmt_list                      shift and go to state 50
    if_stmt                        shift and go to state 12
    define_stmt                    shift and go to state 2
    stmt                           shift and go to state 7
    assign_stmt                    shift and go to state 3
    while_stmt                     shift and go to state 13
    assign_stmt_list               shift and go to state 8
    assign_stmt_expr               shift and go to state 9

state 32

    (8) expr -> expr PLUS . term
    (13) term -> . term TIMES fact
    (14) term -> . fact
    (38) term -> . INTP LPAREN expr RPAREN
    (39) term -> . INTP LPAREN list RPAREN
    (40) term -> . LISTP LPAREN expr RPAREN
    (41) term -> . LISTP LPAREN list RPAREN
    (42) term -> . NULLP LPAREN list RPAREN
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . IDENT
    (18) fact -> . func_call
    (34) func_call -> . IDENT LPAREN expr_list RPAREN

    INTP            shift and go to state 20
    LISTP           shift and go to state 19
    NULLP           shift and go to state 17
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 23
    IDENT           shift and go to state 15

    func_call                      shift and go to state 16
    term                           shift and go to state 51
    fact                           shift and go to state 22

state 33

    (9) expr -> expr MINUS . term
    (13) term -> . term TIMES fact
    (14) term -> . fact
    (38) term -> . INTP LPAREN expr RPAREN
    (39) term -> . INTP LPAREN list RPAREN
    (40) term -> . LISTP LPAREN expr RPAREN
    (41) term -> . LISTP LPAREN list RPAREN
    (42) term -> . NULLP LPAREN list RPAREN
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . IDENT
    (18) fact -> . func_call
    (34) func_call -> . IDENT LPAREN expr_list RPAREN

    INTP            shift and go to state 20
    LISTP           shift and go to state 19
    NULLP           shift and go to state 17
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 23
    IDENT           shift and go to state 15

    func_call                      shift and go to state 16
    term                           shift and go to state 52
    fact                           shift and go to state 22

state 34

    (40) term -> LISTP LPAREN . expr RPAREN
    (41) term -> LISTP LPAREN . list RPAREN
    (8) expr -> . expr PLUS term
    (9) expr -> . expr MINUS term
    (12) expr -> . term
    (23) list -> . LBRACKET sequence RBRACKET
    (24) list -> . LBRACKET RBRACKET
    (35) list -> . CAR LPAREN list RPAREN
    (36) list -> . CDR LPAREN list RPAREN
    (37) list -> . CONS LPAREN expr COMMA list RPAREN
    (13) term -> . term TIMES fact
    (14) term -> . fact
    (38) term -> . INTP LPAREN expr RPAREN
    (39) term -> . INTP LPAREN list RPAREN
    (40) term -> . LISTP LPAREN expr RPAREN
    (41) term -> . LISTP LPAREN list RPAREN
    (42) term -> . NULLP LPAREN list RPAREN
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . IDENT
    (18) fact -> . func_call
    (34) func_call -> . IDENT LPAREN expr_list RPAREN

    LBRACKET        shift and go to state 40
    CAR             shift and go to state 39
    CDR             shift and go to state 43
    CONS            shift and go to state 38
    INTP            shift and go to state 20
    LISTP           shift and go to state 19
    NULLP           shift and go to state 17
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 23
    IDENT           shift and go to state 15

    func_call                      shift and go to state 16
    term                           shift and go to state 14
    expr                           shift and go to state 53
    list                           shift and go to state 54
    fact                           shift and go to state 22

state 35

    (38) term -> INTP LPAREN . expr RPAREN
    (39) term -> INTP LPAREN . list RPAREN
    (8) expr -> . expr PLUS term
    (9) expr -> . expr MINUS term
    (12) expr -> . term
    (23) list -> . LBRACKET sequence RBRACKET
    (24) list -> . LBRACKET RBRACKET
    (35) list -> . CAR LPAREN list RPAREN
    (36) list -> . CDR LPAREN list RPAREN
    (37) list -> . CONS LPAREN expr COMMA list RPAREN
    (13) term -> . term TIMES fact
    (14) term -> . fact
    (38) term -> . INTP LPAREN expr RPAREN
    (39) term -> . INTP LPAREN list RPAREN
    (40) term -> . LISTP LPAREN expr RPAREN
    (41) term -> . LISTP LPAREN list RPAREN
    (42) term -> . NULLP LPAREN list RPAREN
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . IDENT
    (18) fact -> . func_call
    (34) func_call -> . IDENT LPAREN expr_list RPAREN

    LBRACKET        shift and go to state 40
    CAR             shift and go to state 39
    CDR             shift and go to state 43
    CONS            shift and go to state 38
    INTP            shift and go to state 20
    LISTP           shift and go to state 19
    NULLP           shift and go to state 17
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 23
    IDENT           shift and go to state 15

    func_call                      shift and go to state 16
    term                           shift and go to state 14
    expr                           shift and go to state 55
    list                           shift and go to state 56
    fact                           shift and go to state 22

state 36

    (15) fact -> LPAREN expr . RPAREN
    (8) expr -> expr . PLUS term
    (9) expr -> expr . MINUS term

    RPAREN          shift and go to state 57
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33


state 37

    (31) define_stmt -> DEFINE IDENT PROC . LPAREN param_list RPAREN stmt_list END

    LPAREN          shift and go to state 58


state 38

    (37) list -> CONS . LPAREN expr COMMA list RPAREN

    LPAREN          shift and go to state 59


state 39

    (35) list -> CAR . LPAREN list RPAREN

    LPAREN          shift and go to state 60


state 40

    (23) list -> LBRACKET . sequence RBRACKET
    (24) list -> LBRACKET . RBRACKET
    (25) sequence -> . listelement COMMA sequence
    (26) sequence -> . listelement
    (27) listelement -> . list
    (28) listelement -> . NUMBER
    (23) list -> . LBRACKET sequence RBRACKET
    (24) list -> . LBRACKET RBRACKET
    (35) list -> . CAR LPAREN list RPAREN
    (36) list -> . CDR LPAREN list RPAREN
    (37) list -> . CONS LPAREN expr COMMA list RPAREN

    RBRACKET        shift and go to state 64
    NUMBER          shift and go to state 63
    LBRACKET        shift and go to state 40
    CAR             shift and go to state 39
    CDR             shift and go to state 43
    CONS            shift and go to state 38

    listelement                    shift and go to state 65
    list                           shift and go to state 62
    sequence                       shift and go to state 61

state 41

    (21) assign_stmt_expr -> IDENT ASSIGNOP expr .
    (8) expr -> expr . PLUS term
    (9) expr -> expr . MINUS term

    SEMICOLON       reduce using rule 21 (assign_stmt_expr -> IDENT ASSIGNOP expr .)
    OD              reduce using rule 21 (assign_stmt_expr -> IDENT ASSIGNOP expr .)
    ELSE            reduce using rule 21 (assign_stmt_expr -> IDENT ASSIGNOP expr .)
    END             reduce using rule 21 (assign_stmt_expr -> IDENT ASSIGNOP expr .)
    FI              reduce using rule 21 (assign_stmt_expr -> IDENT ASSIGNOP expr .)
    $end            reduce using rule 21 (assign_stmt_expr -> IDENT ASSIGNOP expr .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33


state 42

    (22) assign_stmt_list -> IDENT ASSIGNOP list .

    SEMICOLON       reduce using rule 22 (assign_stmt_list -> IDENT ASSIGNOP list .)
    END             reduce using rule 22 (assign_stmt_list -> IDENT ASSIGNOP list .)
    OD              reduce using rule 22 (assign_stmt_list -> IDENT ASSIGNOP list .)
    $end            reduce using rule 22 (assign_stmt_list -> IDENT ASSIGNOP list .)
    ELSE            reduce using rule 22 (assign_stmt_list -> IDENT ASSIGNOP list .)
    FI              reduce using rule 22 (assign_stmt_list -> IDENT ASSIGNOP list .)


state 43

    (36) list -> CDR . LPAREN list RPAREN

    LPAREN          shift and go to state 66


state 44

    (2) stmt_list -> stmt SEMICOLON stmt_list .

    $end            reduce using rule 2 (stmt_list -> stmt SEMICOLON stmt_list .)
    ELSE            reduce using rule 2 (stmt_list -> stmt SEMICOLON stmt_list .)
    OD              reduce using rule 2 (stmt_list -> stmt SEMICOLON stmt_list .)
    END             reduce using rule 2 (stmt_list -> stmt SEMICOLON stmt_list .)
    FI              reduce using rule 2 (stmt_list -> stmt SEMICOLON stmt_list .)


state 45

    (30) if_stmt -> IF expr THEN . stmt_list ELSE stmt_list FI
    (2) stmt_list -> . stmt SEMICOLON stmt_list
    (3) stmt_list -> . stmt
    (4) stmt -> . assign_stmt
    (5) stmt -> . while_stmt
    (6) stmt -> . if_stmt
    (7) stmt -> . define_stmt
    (19) assign_stmt -> . assign_stmt_expr
    (20) assign_stmt -> . assign_stmt_list
    (29) while_stmt -> . WHILE expr DO stmt_list OD
    (30) if_stmt -> . IF expr THEN stmt_list ELSE stmt_list FI
    (31) define_stmt -> . DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END
    (21) assign_stmt_expr -> . IDENT ASSIGNOP expr
    (22) assign_stmt_list -> . IDENT ASSIGNOP list

    WHILE           shift and go to state 1
    IF              shift and go to state 10
    DEFINE          shift and go to state 5
    IDENT           shift and go to state 6

    stmt_list                      shift and go to state 67
    if_stmt                        shift and go to state 12
    define_stmt                    shift and go to state 2
    stmt                           shift and go to state 7
    assign_stmt                    shift and go to state 3
    while_stmt                     shift and go to state 13
    assign_stmt_list               shift and go to state 8
    assign_stmt_expr               shift and go to state 9

state 46

    (13) term -> term TIMES fact .

    TIMES           reduce using rule 13 (term -> term TIMES fact .)
    COMMA           reduce using rule 13 (term -> term TIMES fact .)
    PLUS            reduce using rule 13 (term -> term TIMES fact .)
    MINUS           reduce using rule 13 (term -> term TIMES fact .)
    THEN            reduce using rule 13 (term -> term TIMES fact .)
    SEMICOLON       reduce using rule 13 (term -> term TIMES fact .)
    $end            reduce using rule 13 (term -> term TIMES fact .)
    OD              reduce using rule 13 (term -> term TIMES fact .)
    ELSE            reduce using rule 13 (term -> term TIMES fact .)
    FI              reduce using rule 13 (term -> term TIMES fact .)
    END             reduce using rule 13 (term -> term TIMES fact .)
    RPAREN          reduce using rule 13 (term -> term TIMES fact .)
    DO              reduce using rule 13 (term -> term TIMES fact .)


state 47

    (34) func_call -> IDENT LPAREN expr_list . RPAREN

    RPAREN          shift and go to state 68


state 48

    (10) expr_list -> expr . COMMA expr_list
    (11) expr_list -> expr .
    (8) expr -> expr . PLUS term
    (9) expr -> expr . MINUS term

    COMMA           shift and go to state 69
    RPAREN          reduce using rule 11 (expr_list -> expr .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33


state 49

    (42) term -> NULLP LPAREN list . RPAREN

    RPAREN          shift and go to state 70


state 50

    (29) while_stmt -> WHILE expr DO stmt_list . OD

    OD              shift and go to state 71


state 51

    (8) expr -> expr PLUS term .
    (13) term -> term . TIMES fact

    THEN            reduce using rule 8 (expr -> expr PLUS term .)
    PLUS            reduce using rule 8 (expr -> expr PLUS term .)
    MINUS           reduce using rule 8 (expr -> expr PLUS term .)
    COMMA           reduce using rule 8 (expr -> expr PLUS term .)
    RPAREN          reduce using rule 8 (expr -> expr PLUS term .)
    SEMICOLON       reduce using rule 8 (expr -> expr PLUS term .)
    $end            reduce using rule 8 (expr -> expr PLUS term .)
    OD              reduce using rule 8 (expr -> expr PLUS term .)
    ELSE            reduce using rule 8 (expr -> expr PLUS term .)
    FI              reduce using rule 8 (expr -> expr PLUS term .)
    END             reduce using rule 8 (expr -> expr PLUS term .)
    DO              reduce using rule 8 (expr -> expr PLUS term .)
    TIMES           shift and go to state 28


state 52

    (9) expr -> expr MINUS term .
    (13) term -> term . TIMES fact

    THEN            reduce using rule 9 (expr -> expr MINUS term .)
    PLUS            reduce using rule 9 (expr -> expr MINUS term .)
    MINUS           reduce using rule 9 (expr -> expr MINUS term .)
    COMMA           reduce using rule 9 (expr -> expr MINUS term .)
    RPAREN          reduce using rule 9 (expr -> expr MINUS term .)
    SEMICOLON       reduce using rule 9 (expr -> expr MINUS term .)
    $end            reduce using rule 9 (expr -> expr MINUS term .)
    OD              reduce using rule 9 (expr -> expr MINUS term .)
    ELSE            reduce using rule 9 (expr -> expr MINUS term .)
    FI              reduce using rule 9 (expr -> expr MINUS term .)
    END             reduce using rule 9 (expr -> expr MINUS term .)
    DO              reduce using rule 9 (expr -> expr MINUS term .)
    TIMES           shift and go to state 28


state 53

    (40) term -> LISTP LPAREN expr . RPAREN
    (8) expr -> expr . PLUS term
    (9) expr -> expr . MINUS term

    RPAREN          shift and go to state 72
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33


state 54

    (41) term -> LISTP LPAREN list . RPAREN

    RPAREN          shift and go to state 73


state 55

    (38) term -> INTP LPAREN expr . RPAREN
    (8) expr -> expr . PLUS term
    (9) expr -> expr . MINUS term

    RPAREN          shift and go to state 74
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33


state 56

    (39) term -> INTP LPAREN list . RPAREN

    RPAREN          shift and go to state 75


state 57

    (15) fact -> LPAREN expr RPAREN .

    TIMES           reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    DO              reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    THEN            reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    $end            reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    OD              reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    ELSE            reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    FI              reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    END             reduce using rule 15 (fact -> LPAREN expr RPAREN .)


state 58

    (31) define_stmt -> DEFINE IDENT PROC LPAREN . param_list RPAREN stmt_list END
    (32) param_list -> . IDENT COMMA param_list
    (33) param_list -> . IDENT

    IDENT           shift and go to state 76

    param_list                     shift and go to state 77

state 59

    (37) list -> CONS LPAREN . expr COMMA list RPAREN
    (8) expr -> . expr PLUS term
    (9) expr -> . expr MINUS term
    (12) expr -> . term
    (13) term -> . term TIMES fact
    (14) term -> . fact
    (38) term -> . INTP LPAREN expr RPAREN
    (39) term -> . INTP LPAREN list RPAREN
    (40) term -> . LISTP LPAREN expr RPAREN
    (41) term -> . LISTP LPAREN list RPAREN
    (42) term -> . NULLP LPAREN list RPAREN
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . IDENT
    (18) fact -> . func_call
    (34) func_call -> . IDENT LPAREN expr_list RPAREN

    INTP            shift and go to state 20
    LISTP           shift and go to state 19
    NULLP           shift and go to state 17
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 23
    IDENT           shift and go to state 15

    func_call                      shift and go to state 16
    term                           shift and go to state 14
    expr                           shift and go to state 78
    fact                           shift and go to state 22

state 60

    (35) list -> CAR LPAREN . list RPAREN
    (23) list -> . LBRACKET sequence RBRACKET
    (24) list -> . LBRACKET RBRACKET
    (35) list -> . CAR LPAREN list RPAREN
    (36) list -> . CDR LPAREN list RPAREN
    (37) list -> . CONS LPAREN expr COMMA list RPAREN

    LBRACKET        shift and go to state 40
    CAR             shift and go to state 39
    CDR             shift and go to state 43
    CONS            shift and go to state 38

    list                           shift and go to state 79

state 61

    (23) list -> LBRACKET sequence . RBRACKET

    RBRACKET        shift and go to state 80


state 62

    (27) listelement -> list .

    COMMA           reduce using rule 27 (listelement -> list .)
    RBRACKET        reduce using rule 27 (listelement -> list .)


state 63

    (28) listelement -> NUMBER .

    COMMA           reduce using rule 28 (listelement -> NUMBER .)
    RBRACKET        reduce using rule 28 (listelement -> NUMBER .)


state 64

    (24) list -> LBRACKET RBRACKET .

    RPAREN          reduce using rule 24 (list -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 24 (list -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 24 (list -> LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 24 (list -> LBRACKET RBRACKET .)
    $end            reduce using rule 24 (list -> LBRACKET RBRACKET .)
    OD              reduce using rule 24 (list -> LBRACKET RBRACKET .)
    ELSE            reduce using rule 24 (list -> LBRACKET RBRACKET .)
    FI              reduce using rule 24 (list -> LBRACKET RBRACKET .)
    END             reduce using rule 24 (list -> LBRACKET RBRACKET .)


state 65

    (25) sequence -> listelement . COMMA sequence
    (26) sequence -> listelement .

    COMMA           shift and go to state 81
    RBRACKET        reduce using rule 26 (sequence -> listelement .)


state 66

    (36) list -> CDR LPAREN . list RPAREN
    (23) list -> . LBRACKET sequence RBRACKET
    (24) list -> . LBRACKET RBRACKET
    (35) list -> . CAR LPAREN list RPAREN
    (36) list -> . CDR LPAREN list RPAREN
    (37) list -> . CONS LPAREN expr COMMA list RPAREN

    LBRACKET        shift and go to state 40
    CAR             shift and go to state 39
    CDR             shift and go to state 43
    CONS            shift and go to state 38

    list                           shift and go to state 82

state 67

    (30) if_stmt -> IF expr THEN stmt_list . ELSE stmt_list FI

    ELSE            shift and go to state 83


state 68

    (34) func_call -> IDENT LPAREN expr_list RPAREN .

    TIMES           reduce using rule 34 (func_call -> IDENT LPAREN expr_list RPAREN .)
    THEN            reduce using rule 34 (func_call -> IDENT LPAREN expr_list RPAREN .)
    PLUS            reduce using rule 34 (func_call -> IDENT LPAREN expr_list RPAREN .)
    MINUS           reduce using rule 34 (func_call -> IDENT LPAREN expr_list RPAREN .)
    RPAREN          reduce using rule 34 (func_call -> IDENT LPAREN expr_list RPAREN .)
    DO              reduce using rule 34 (func_call -> IDENT LPAREN expr_list RPAREN .)
    COMMA           reduce using rule 34 (func_call -> IDENT LPAREN expr_list RPAREN .)
    SEMICOLON       reduce using rule 34 (func_call -> IDENT LPAREN expr_list RPAREN .)
    $end            reduce using rule 34 (func_call -> IDENT LPAREN expr_list RPAREN .)
    OD              reduce using rule 34 (func_call -> IDENT LPAREN expr_list RPAREN .)
    ELSE            reduce using rule 34 (func_call -> IDENT LPAREN expr_list RPAREN .)
    FI              reduce using rule 34 (func_call -> IDENT LPAREN expr_list RPAREN .)
    END             reduce using rule 34 (func_call -> IDENT LPAREN expr_list RPAREN .)


state 69

    (10) expr_list -> expr COMMA . expr_list
    (10) expr_list -> . expr COMMA expr_list
    (11) expr_list -> . expr
    (8) expr -> . expr PLUS term
    (9) expr -> . expr MINUS term
    (12) expr -> . term
    (13) term -> . term TIMES fact
    (14) term -> . fact
    (38) term -> . INTP LPAREN expr RPAREN
    (39) term -> . INTP LPAREN list RPAREN
    (40) term -> . LISTP LPAREN expr RPAREN
    (41) term -> . LISTP LPAREN list RPAREN
    (42) term -> . NULLP LPAREN list RPAREN
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . IDENT
    (18) fact -> . func_call
    (34) func_call -> . IDENT LPAREN expr_list RPAREN

    INTP            shift and go to state 20
    LISTP           shift and go to state 19
    NULLP           shift and go to state 17
    LPAREN          shift and go to state 21
    NUMBER          shift and go to state 23
    IDENT           shift and go to state 15

    func_call                      shift and go to state 16
    term                           shift and go to state 14
    expr                           shift and go to state 48
    expr_list                      shift and go to state 84
    fact                           shift and go to state 22

state 70

    (42) term -> NULLP LPAREN list RPAREN .

    TIMES           reduce using rule 42 (term -> NULLP LPAREN list RPAREN .)
    COMMA           reduce using rule 42 (term -> NULLP LPAREN list RPAREN .)
    PLUS            reduce using rule 42 (term -> NULLP LPAREN list RPAREN .)
    MINUS           reduce using rule 42 (term -> NULLP LPAREN list RPAREN .)
    THEN            reduce using rule 42 (term -> NULLP LPAREN list RPAREN .)
    SEMICOLON       reduce using rule 42 (term -> NULLP LPAREN list RPAREN .)
    $end            reduce using rule 42 (term -> NULLP LPAREN list RPAREN .)
    OD              reduce using rule 42 (term -> NULLP LPAREN list RPAREN .)
    ELSE            reduce using rule 42 (term -> NULLP LPAREN list RPAREN .)
    FI              reduce using rule 42 (term -> NULLP LPAREN list RPAREN .)
    END             reduce using rule 42 (term -> NULLP LPAREN list RPAREN .)
    RPAREN          reduce using rule 42 (term -> NULLP LPAREN list RPAREN .)
    DO              reduce using rule 42 (term -> NULLP LPAREN list RPAREN .)


state 71

    (29) while_stmt -> WHILE expr DO stmt_list OD .

    SEMICOLON       reduce using rule 29 (while_stmt -> WHILE expr DO stmt_list OD .)
    END             reduce using rule 29 (while_stmt -> WHILE expr DO stmt_list OD .)
    OD              reduce using rule 29 (while_stmt -> WHILE expr DO stmt_list OD .)
    $end            reduce using rule 29 (while_stmt -> WHILE expr DO stmt_list OD .)
    ELSE            reduce using rule 29 (while_stmt -> WHILE expr DO stmt_list OD .)
    FI              reduce using rule 29 (while_stmt -> WHILE expr DO stmt_list OD .)


state 72

    (40) term -> LISTP LPAREN expr RPAREN .

    TIMES           reduce using rule 40 (term -> LISTP LPAREN expr RPAREN .)
    COMMA           reduce using rule 40 (term -> LISTP LPAREN expr RPAREN .)
    PLUS            reduce using rule 40 (term -> LISTP LPAREN expr RPAREN .)
    MINUS           reduce using rule 40 (term -> LISTP LPAREN expr RPAREN .)
    THEN            reduce using rule 40 (term -> LISTP LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 40 (term -> LISTP LPAREN expr RPAREN .)
    $end            reduce using rule 40 (term -> LISTP LPAREN expr RPAREN .)
    OD              reduce using rule 40 (term -> LISTP LPAREN expr RPAREN .)
    ELSE            reduce using rule 40 (term -> LISTP LPAREN expr RPAREN .)
    FI              reduce using rule 40 (term -> LISTP LPAREN expr RPAREN .)
    END             reduce using rule 40 (term -> LISTP LPAREN expr RPAREN .)
    RPAREN          reduce using rule 40 (term -> LISTP LPAREN expr RPAREN .)
    DO              reduce using rule 40 (term -> LISTP LPAREN expr RPAREN .)


state 73

    (41) term -> LISTP LPAREN list RPAREN .

    TIMES           reduce using rule 41 (term -> LISTP LPAREN list RPAREN .)
    COMMA           reduce using rule 41 (term -> LISTP LPAREN list RPAREN .)
    PLUS            reduce using rule 41 (term -> LISTP LPAREN list RPAREN .)
    MINUS           reduce using rule 41 (term -> LISTP LPAREN list RPAREN .)
    THEN            reduce using rule 41 (term -> LISTP LPAREN list RPAREN .)
    SEMICOLON       reduce using rule 41 (term -> LISTP LPAREN list RPAREN .)
    $end            reduce using rule 41 (term -> LISTP LPAREN list RPAREN .)
    OD              reduce using rule 41 (term -> LISTP LPAREN list RPAREN .)
    ELSE            reduce using rule 41 (term -> LISTP LPAREN list RPAREN .)
    FI              reduce using rule 41 (term -> LISTP LPAREN list RPAREN .)
    END             reduce using rule 41 (term -> LISTP LPAREN list RPAREN .)
    RPAREN          reduce using rule 41 (term -> LISTP LPAREN list RPAREN .)
    DO              reduce using rule 41 (term -> LISTP LPAREN list RPAREN .)


state 74

    (38) term -> INTP LPAREN expr RPAREN .

    TIMES           reduce using rule 38 (term -> INTP LPAREN expr RPAREN .)
    COMMA           reduce using rule 38 (term -> INTP LPAREN expr RPAREN .)
    PLUS            reduce using rule 38 (term -> INTP LPAREN expr RPAREN .)
    MINUS           reduce using rule 38 (term -> INTP LPAREN expr RPAREN .)
    THEN            reduce using rule 38 (term -> INTP LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 38 (term -> INTP LPAREN expr RPAREN .)
    $end            reduce using rule 38 (term -> INTP LPAREN expr RPAREN .)
    OD              reduce using rule 38 (term -> INTP LPAREN expr RPAREN .)
    ELSE            reduce using rule 38 (term -> INTP LPAREN expr RPAREN .)
    FI              reduce using rule 38 (term -> INTP LPAREN expr RPAREN .)
    END             reduce using rule 38 (term -> INTP LPAREN expr RPAREN .)
    RPAREN          reduce using rule 38 (term -> INTP LPAREN expr RPAREN .)
    DO              reduce using rule 38 (term -> INTP LPAREN expr RPAREN .)


state 75

    (39) term -> INTP LPAREN list RPAREN .

    TIMES           reduce using rule 39 (term -> INTP LPAREN list RPAREN .)
    COMMA           reduce using rule 39 (term -> INTP LPAREN list RPAREN .)
    PLUS            reduce using rule 39 (term -> INTP LPAREN list RPAREN .)
    MINUS           reduce using rule 39 (term -> INTP LPAREN list RPAREN .)
    THEN            reduce using rule 39 (term -> INTP LPAREN list RPAREN .)
    SEMICOLON       reduce using rule 39 (term -> INTP LPAREN list RPAREN .)
    $end            reduce using rule 39 (term -> INTP LPAREN list RPAREN .)
    OD              reduce using rule 39 (term -> INTP LPAREN list RPAREN .)
    ELSE            reduce using rule 39 (term -> INTP LPAREN list RPAREN .)
    FI              reduce using rule 39 (term -> INTP LPAREN list RPAREN .)
    END             reduce using rule 39 (term -> INTP LPAREN list RPAREN .)
    RPAREN          reduce using rule 39 (term -> INTP LPAREN list RPAREN .)
    DO              reduce using rule 39 (term -> INTP LPAREN list RPAREN .)


state 76

    (32) param_list -> IDENT . COMMA param_list
    (33) param_list -> IDENT .

    COMMA           shift and go to state 85
    RPAREN          reduce using rule 33 (param_list -> IDENT .)


state 77

    (31) define_stmt -> DEFINE IDENT PROC LPAREN param_list . RPAREN stmt_list END

    RPAREN          shift and go to state 86


state 78

    (37) list -> CONS LPAREN expr . COMMA list RPAREN
    (8) expr -> expr . PLUS term
    (9) expr -> expr . MINUS term

    COMMA           shift and go to state 87
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33


state 79

    (35) list -> CAR LPAREN list . RPAREN

    RPAREN          shift and go to state 88


state 80

    (23) list -> LBRACKET sequence RBRACKET .

    RPAREN          reduce using rule 23 (list -> LBRACKET sequence RBRACKET .)
    COMMA           reduce using rule 23 (list -> LBRACKET sequence RBRACKET .)
    RBRACKET        reduce using rule 23 (list -> LBRACKET sequence RBRACKET .)
    SEMICOLON       reduce using rule 23 (list -> LBRACKET sequence RBRACKET .)
    $end            reduce using rule 23 (list -> LBRACKET sequence RBRACKET .)
    OD              reduce using rule 23 (list -> LBRACKET sequence RBRACKET .)
    ELSE            reduce using rule 23 (list -> LBRACKET sequence RBRACKET .)
    FI              reduce using rule 23 (list -> LBRACKET sequence RBRACKET .)
    END             reduce using rule 23 (list -> LBRACKET sequence RBRACKET .)


state 81

    (25) sequence -> listelement COMMA . sequence
    (25) sequence -> . listelement COMMA sequence
    (26) sequence -> . listelement
    (27) listelement -> . list
    (28) listelement -> . NUMBER
    (23) list -> . LBRACKET sequence RBRACKET
    (24) list -> . LBRACKET RBRACKET
    (35) list -> . CAR LPAREN list RPAREN
    (36) list -> . CDR LPAREN list RPAREN
    (37) list -> . CONS LPAREN expr COMMA list RPAREN

    NUMBER          shift and go to state 63
    LBRACKET        shift and go to state 40
    CAR             shift and go to state 39
    CDR             shift and go to state 43
    CONS            shift and go to state 38

    listelement                    shift and go to state 65
    list                           shift and go to state 62
    sequence                       shift and go to state 89

state 82

    (36) list -> CDR LPAREN list . RPAREN

    RPAREN          shift and go to state 90


state 83

    (30) if_stmt -> IF expr THEN stmt_list ELSE . stmt_list FI
    (2) stmt_list -> . stmt SEMICOLON stmt_list
    (3) stmt_list -> . stmt
    (4) stmt -> . assign_stmt
    (5) stmt -> . while_stmt
    (6) stmt -> . if_stmt
    (7) stmt -> . define_stmt
    (19) assign_stmt -> . assign_stmt_expr
    (20) assign_stmt -> . assign_stmt_list
    (29) while_stmt -> . WHILE expr DO stmt_list OD
    (30) if_stmt -> . IF expr THEN stmt_list ELSE stmt_list FI
    (31) define_stmt -> . DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END
    (21) assign_stmt_expr -> . IDENT ASSIGNOP expr
    (22) assign_stmt_list -> . IDENT ASSIGNOP list

    WHILE           shift and go to state 1
    IF              shift and go to state 10
    DEFINE          shift and go to state 5
    IDENT           shift and go to state 6

    stmt_list                      shift and go to state 91
    if_stmt                        shift and go to state 12
    define_stmt                    shift and go to state 2
    stmt                           shift and go to state 7
    assign_stmt                    shift and go to state 3
    while_stmt                     shift and go to state 13
    assign_stmt_list               shift and go to state 8
    assign_stmt_expr               shift and go to state 9

state 84

    (10) expr_list -> expr COMMA expr_list .

    RPAREN          reduce using rule 10 (expr_list -> expr COMMA expr_list .)


state 85

    (32) param_list -> IDENT COMMA . param_list
    (32) param_list -> . IDENT COMMA param_list
    (33) param_list -> . IDENT

    IDENT           shift and go to state 76

    param_list                     shift and go to state 92

state 86

    (31) define_stmt -> DEFINE IDENT PROC LPAREN param_list RPAREN . stmt_list END
    (2) stmt_list -> . stmt SEMICOLON stmt_list
    (3) stmt_list -> . stmt
    (4) stmt -> . assign_stmt
    (5) stmt -> . while_stmt
    (6) stmt -> . if_stmt
    (7) stmt -> . define_stmt
    (19) assign_stmt -> . assign_stmt_expr
    (20) assign_stmt -> . assign_stmt_list
    (29) while_stmt -> . WHILE expr DO stmt_list OD
    (30) if_stmt -> . IF expr THEN stmt_list ELSE stmt_list FI
    (31) define_stmt -> . DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END
    (21) assign_stmt_expr -> . IDENT ASSIGNOP expr
    (22) assign_stmt_list -> . IDENT ASSIGNOP list

    WHILE           shift and go to state 1
    IF              shift and go to state 10
    DEFINE          shift and go to state 5
    IDENT           shift and go to state 6

    stmt_list                      shift and go to state 93
    if_stmt                        shift and go to state 12
    define_stmt                    shift and go to state 2
    stmt                           shift and go to state 7
    assign_stmt                    shift and go to state 3
    while_stmt                     shift and go to state 13
    assign_stmt_list               shift and go to state 8
    assign_stmt_expr               shift and go to state 9

state 87

    (37) list -> CONS LPAREN expr COMMA . list RPAREN
    (23) list -> . LBRACKET sequence RBRACKET
    (24) list -> . LBRACKET RBRACKET
    (35) list -> . CAR LPAREN list RPAREN
    (36) list -> . CDR LPAREN list RPAREN
    (37) list -> . CONS LPAREN expr COMMA list RPAREN

    LBRACKET        shift and go to state 40
    CAR             shift and go to state 39
    CDR             shift and go to state 43
    CONS            shift and go to state 38

    list                           shift and go to state 94

state 88

    (35) list -> CAR LPAREN list RPAREN .

    RPAREN          reduce using rule 35 (list -> CAR LPAREN list RPAREN .)
    COMMA           reduce using rule 35 (list -> CAR LPAREN list RPAREN .)
    RBRACKET        reduce using rule 35 (list -> CAR LPAREN list RPAREN .)
    SEMICOLON       reduce using rule 35 (list -> CAR LPAREN list RPAREN .)
    $end            reduce using rule 35 (list -> CAR LPAREN list RPAREN .)
    OD              reduce using rule 35 (list -> CAR LPAREN list RPAREN .)
    ELSE            reduce using rule 35 (list -> CAR LPAREN list RPAREN .)
    FI              reduce using rule 35 (list -> CAR LPAREN list RPAREN .)
    END             reduce using rule 35 (list -> CAR LPAREN list RPAREN .)


state 89

    (25) sequence -> listelement COMMA sequence .

    RBRACKET        reduce using rule 25 (sequence -> listelement COMMA sequence .)


state 90

    (36) list -> CDR LPAREN list RPAREN .

    RPAREN          reduce using rule 36 (list -> CDR LPAREN list RPAREN .)
    COMMA           reduce using rule 36 (list -> CDR LPAREN list RPAREN .)
    RBRACKET        reduce using rule 36 (list -> CDR LPAREN list RPAREN .)
    SEMICOLON       reduce using rule 36 (list -> CDR LPAREN list RPAREN .)
    $end            reduce using rule 36 (list -> CDR LPAREN list RPAREN .)
    OD              reduce using rule 36 (list -> CDR LPAREN list RPAREN .)
    ELSE            reduce using rule 36 (list -> CDR LPAREN list RPAREN .)
    FI              reduce using rule 36 (list -> CDR LPAREN list RPAREN .)
    END             reduce using rule 36 (list -> CDR LPAREN list RPAREN .)


state 91

    (30) if_stmt -> IF expr THEN stmt_list ELSE stmt_list . FI

    FI              shift and go to state 95


state 92

    (32) param_list -> IDENT COMMA param_list .

    RPAREN          reduce using rule 32 (param_list -> IDENT COMMA param_list .)


state 93

    (31) define_stmt -> DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list . END

    END             shift and go to state 96


state 94

    (37) list -> CONS LPAREN expr COMMA list . RPAREN

    RPAREN          shift and go to state 97


state 95

    (30) if_stmt -> IF expr THEN stmt_list ELSE stmt_list FI .

    SEMICOLON       reduce using rule 30 (if_stmt -> IF expr THEN stmt_list ELSE stmt_list FI .)
    FI              reduce using rule 30 (if_stmt -> IF expr THEN stmt_list ELSE stmt_list FI .)
    ELSE            reduce using rule 30 (if_stmt -> IF expr THEN stmt_list ELSE stmt_list FI .)
    END             reduce using rule 30 (if_stmt -> IF expr THEN stmt_list ELSE stmt_list FI .)
    OD              reduce using rule 30 (if_stmt -> IF expr THEN stmt_list ELSE stmt_list FI .)
    $end            reduce using rule 30 (if_stmt -> IF expr THEN stmt_list ELSE stmt_list FI .)


state 96

    (31) define_stmt -> DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END .

    SEMICOLON       reduce using rule 31 (define_stmt -> DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END .)
    END             reduce using rule 31 (define_stmt -> DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END .)
    ELSE            reduce using rule 31 (define_stmt -> DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END .)
    FI              reduce using rule 31 (define_stmt -> DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END .)
    $end            reduce using rule 31 (define_stmt -> DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END .)
    OD              reduce using rule 31 (define_stmt -> DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END .)


state 97

    (37) list -> CONS LPAREN expr COMMA list RPAREN .

    RPAREN          reduce using rule 37 (list -> CONS LPAREN expr COMMA list RPAREN .)
    COMMA           reduce using rule 37 (list -> CONS LPAREN expr COMMA list RPAREN .)
    RBRACKET        reduce using rule 37 (list -> CONS LPAREN expr COMMA list RPAREN .)
    SEMICOLON       reduce using rule 37 (list -> CONS LPAREN expr COMMA list RPAREN .)
    $end            reduce using rule 37 (list -> CONS LPAREN expr COMMA list RPAREN .)
    OD              reduce using rule 37 (list -> CONS LPAREN expr COMMA list RPAREN .)
    ELSE            reduce using rule 37 (list -> CONS LPAREN expr COMMA list RPAREN .)
    FI              reduce using rule 37 (list -> CONS LPAREN expr COMMA list RPAREN .)
    END             reduce using rule 37 (list -> CONS LPAREN expr COMMA list RPAREN .)

