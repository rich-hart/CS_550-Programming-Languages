Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> list
Rule 1     list -> LPAREN sequence RPAREN
Rule 2     list -> LPAREN RPAREN
Rule 3     sequence -> listelement COMMA sequence
Rule 4     sequence -> listelement
Rule 5     listelement -> list
Rule 6     listelement -> NUMBER

Terminals, with rules where they appear

COMMA                : 3
LPAREN               : 1 2
NUMBER               : 6
RPAREN               : 1 2
error                : 

Nonterminals, with rules where they appear

list                 : 5 0
listelement          : 3 4
sequence             : 1 3

Parsing method: LALR

state 0

    (0) S' -> . list
    (1) list -> . LPAREN sequence RPAREN
    (2) list -> . LPAREN RPAREN

    LPAREN          shift and go to state 2

    list                           shift and go to state 1

state 1

    (0) S' -> list .



state 2

    (1) list -> LPAREN . sequence RPAREN
    (2) list -> LPAREN . RPAREN
    (3) sequence -> . listelement COMMA sequence
    (4) sequence -> . listelement
    (5) listelement -> . list
    (6) listelement -> . NUMBER
    (1) list -> . LPAREN sequence RPAREN
    (2) list -> . LPAREN RPAREN

    RPAREN          shift and go to state 3
    NUMBER          shift and go to state 6
    LPAREN          shift and go to state 2

    listelement                    shift and go to state 7
    list                           shift and go to state 5
    sequence                       shift and go to state 4

state 3

    (2) list -> LPAREN RPAREN .

    $end            reduce using rule 2 (list -> LPAREN RPAREN .)
    COMMA           reduce using rule 2 (list -> LPAREN RPAREN .)
    RPAREN          reduce using rule 2 (list -> LPAREN RPAREN .)


state 4

    (1) list -> LPAREN sequence . RPAREN

    RPAREN          shift and go to state 8


state 5

    (5) listelement -> list .

    COMMA           reduce using rule 5 (listelement -> list .)
    RPAREN          reduce using rule 5 (listelement -> list .)


state 6

    (6) listelement -> NUMBER .

    COMMA           reduce using rule 6 (listelement -> NUMBER .)
    RPAREN          reduce using rule 6 (listelement -> NUMBER .)


state 7

    (3) sequence -> listelement . COMMA sequence
    (4) sequence -> listelement .

    COMMA           shift and go to state 9
    RPAREN          reduce using rule 4 (sequence -> listelement .)


state 8

    (1) list -> LPAREN sequence RPAREN .

    $end            reduce using rule 1 (list -> LPAREN sequence RPAREN .)
    COMMA           reduce using rule 1 (list -> LPAREN sequence RPAREN .)
    RPAREN          reduce using rule 1 (list -> LPAREN sequence RPAREN .)


state 9

    (3) sequence -> listelement COMMA . sequence
    (3) sequence -> . listelement COMMA sequence
    (4) sequence -> . listelement
    (5) listelement -> . list
    (6) listelement -> . NUMBER
    (1) list -> . LPAREN sequence RPAREN
    (2) list -> . LPAREN RPAREN

    NUMBER          shift and go to state 6
    LPAREN          shift and go to state 2

    listelement                    shift and go to state 7
    list                           shift and go to state 5
    sequence                       shift and go to state 10

state 10

    (3) sequence -> listelement COMMA sequence .

    RPAREN          reduce using rule 3 (sequence -> listelement COMMA sequence .)

