Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> list
Rule 1     list -> LBRACKET sequence RBRACKET
Rule 2     list -> LBRACKET RBRACKET
Rule 3     sequence -> listelement COMMA sequence
Rule 4     sequence -> listelement
Rule 5     listelement -> list
Rule 6     listelement -> NUMBER
Rule 7     start_program -> program
Rule 8     start_program -> list
Rule 9     start_list -> list
Rule 10    program -> stmt_list
Rule 11    stmt_list -> stmt SEMICOLON stmt_list
Rule 12    stmt_list -> stmt
Rule 13    stmt -> assign_stmt
Rule 14    stmt -> while_stmt
Rule 15    stmt -> if_stmt
Rule 16    stmt -> define_stmt
Rule 17    expr -> expr PLUS term
Rule 18    expr -> expr MINUS term
Rule 19    expr_list -> expr COMMA expr_list
Rule 20    expr_list -> expr
Rule 21    expr -> term
Rule 22    term -> term TIMES fact
Rule 23    term -> fact
Rule 24    fact -> LPAREN expr RPAREN
Rule 25    fact -> NUMBER
Rule 26    fact -> IDENT
Rule 27    fact -> func_call
Rule 28    fact -> NAME
Rule 29    assign_stmt -> IDENT ASSIGNOP expr
Rule 30    while_stmt -> WHILE expr DO stmt_list OD
Rule 31    if_stmt -> IF expr THEN stmt_list ELSE stmt_list FI
Rule 32    define_stmt -> DEFINE IDENT PROC LPAREN param_list RPAREN stmt_list END
Rule 33    param_list -> IDENT COMMA param_list
Rule 34    param_list -> IDENT
Rule 35    func_call -> IDENT LPAREN expr_list RPAREN

Terminals, with rules where they appear

ASSIGNOP             : 29
COMMA                : 3 19 33
DEFINE               : 32
DO                   : 30
ELSE                 : 31
END                  : 32
FI                   : 31
IDENT                : 26 29 32 33 34 35
IF                   : 31
LBRACKET             : 1 2
LPAREN               : 24 32 35
MINUS                : 18
NAME                 : 28
NUMBER               : 6 25
OD                   : 30
PLUS                 : 17
PROC                 : 32
RBRACKET             : 1 2
RPAREN               : 24 32 35
SEMICOLON            : 11
THEN                 : 31
TIMES                : 22
WHILE                : 30
error                : 

Nonterminals, with rules where they appear

assign_stmt          : 13
define_stmt          : 16
expr                 : 17 18 19 20 24 29 30 31
expr_list            : 19 35
fact                 : 22 23
func_call            : 27
if_stmt              : 15
list                 : 5 8 9 0
listelement          : 3 4
param_list           : 32 33
program              : 7
sequence             : 1 3
start_list           : 
start_program        : 
stmt                 : 11 12
stmt_list            : 10 11 30 31 31 32
term                 : 17 18 21 22
while_stmt           : 14

Parsing method: LALR

state 0

    (0) S' -> . list
    (1) list -> . LBRACKET sequence RBRACKET
    (2) list -> . LBRACKET RBRACKET

    LBRACKET        shift and go to state 1

    list                           shift and go to state 2

state 1

    (1) list -> LBRACKET . sequence RBRACKET
    (2) list -> LBRACKET . RBRACKET
    (3) sequence -> . listelement COMMA sequence
    (4) sequence -> . listelement
    (5) listelement -> . list
    (6) listelement -> . NUMBER
    (1) list -> . LBRACKET sequence RBRACKET
    (2) list -> . LBRACKET RBRACKET

    RBRACKET        shift and go to state 6
    NUMBER          shift and go to state 5
    LBRACKET        shift and go to state 1

    listelement                    shift and go to state 7
    list                           shift and go to state 4
    sequence                       shift and go to state 3

state 2

    (0) S' -> list .



state 3

    (1) list -> LBRACKET sequence . RBRACKET

    RBRACKET        shift and go to state 8


state 4

    (5) listelement -> list .

    COMMA           reduce using rule 5 (listelement -> list .)
    RBRACKET        reduce using rule 5 (listelement -> list .)


state 5

    (6) listelement -> NUMBER .

    COMMA           reduce using rule 6 (listelement -> NUMBER .)
    RBRACKET        reduce using rule 6 (listelement -> NUMBER .)


state 6

    (2) list -> LBRACKET RBRACKET .

    COMMA           reduce using rule 2 (list -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 2 (list -> LBRACKET RBRACKET .)
    $end            reduce using rule 2 (list -> LBRACKET RBRACKET .)


state 7

    (3) sequence -> listelement . COMMA sequence
    (4) sequence -> listelement .

    COMMA           shift and go to state 9
    RBRACKET        reduce using rule 4 (sequence -> listelement .)


state 8

    (1) list -> LBRACKET sequence RBRACKET .

    COMMA           reduce using rule 1 (list -> LBRACKET sequence RBRACKET .)
    RBRACKET        reduce using rule 1 (list -> LBRACKET sequence RBRACKET .)
    $end            reduce using rule 1 (list -> LBRACKET sequence RBRACKET .)


state 9

    (3) sequence -> listelement COMMA . sequence
    (3) sequence -> . listelement COMMA sequence
    (4) sequence -> . listelement
    (5) listelement -> . list
    (6) listelement -> . NUMBER
    (1) list -> . LBRACKET sequence RBRACKET
    (2) list -> . LBRACKET RBRACKET

    NUMBER          shift and go to state 5
    LBRACKET        shift and go to state 1

    listelement                    shift and go to state 7
    list                           shift and go to state 4
    sequence                       shift and go to state 10

state 10

    (3) sequence -> listelement COMMA sequence .

    RBRACKET        reduce using rule 3 (sequence -> listelement COMMA sequence .)

